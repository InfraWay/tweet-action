"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var oauth_1 = __importDefault(require("oauth"));
var Cache_1 = __importDefault(require("./Cache"));
var utils_1 = require("./utils");
var Transport = /** @class */ (function () {
    function Transport(options) {
        this.credentials = options;
        this.oauth = new oauth_1.default.OAuth('https://api.twitter.com/oauth/request_token', 'https://api.twitter.com/oauth/access_token', this.credentials.apiKey, this.credentials.apiSecret, '1.0A', null, 'HMAC-SHA1');
        if (!(options === null || options === void 0 ? void 0 : options.disableCache)) {
            this.cache = new Cache_1.default(options === null || options === void 0 ? void 0 : options.ttl, options.maxByteSize);
        }
    }
    Transport.prototype.updateOptions = function (options) {
        var _this = this;
        var apiKey = options.apiKey, apiSecret = options.apiSecret, rest = __rest(options, ["apiKey", "apiSecret"]);
        var cleanOptions = rest;
        Object.keys(cleanOptions).forEach(function (key) {
            if (cleanOptions[key]) {
                _this.credentials[key] = cleanOptions[key];
            }
        });
    };
    Transport.prototype.doDeleteRequest = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.oauth) {
                    throw Error('Unable to make request. Authentication has not been established');
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (!_this.credentials.accessToken || !_this.credentials.accessTokenSecret) {
                            reject(new Error('Unable to make request. Authentication has not been established'));
                            return;
                        }
                        var formattedUrl = utils_1.formatURL(url);
                        _this.oauth.delete(formattedUrl, _this.credentials.accessToken, _this.credentials.accessTokenSecret, function (err, body) {
                            if (err) {
                                reject(err);
                                return;
                            }
                            if (!body) {
                                resolve();
                                return;
                            }
                            var result = utils_1.parse(body.toString());
                            resolve(result);
                        });
                    })];
            });
        });
    };
    Transport.prototype.doGetRequest = function (url) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_b) {
                if (!this.oauth) {
                    throw Error('Unable to make request. Authentication has not been established');
                }
                if ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.has(url)) {
                    return [2 /*return*/, this.cache.get(url)];
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (!_this.credentials.accessToken || !_this.credentials.accessTokenSecret) {
                            reject(new Error('Unable to make request. Authentication has not been established'));
                            return;
                        }
                        var formattedUrl = utils_1.formatURL(url);
                        _this.oauth.get(formattedUrl, _this.credentials.accessToken, _this.credentials.accessTokenSecret, function (err, body) {
                            var _a;
                            if (err) {
                                reject(err);
                                return;
                            }
                            if (!body) {
                                resolve();
                                return;
                            }
                            var result = utils_1.parse(body.toString());
                            (_a = _this.cache) === null || _a === void 0 ? void 0 : _a.add(url, result);
                            resolve(result);
                        });
                    })];
            });
        });
    };
    Transport.prototype.doPostRequest = function (url, body) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.oauth || !this.credentials) {
                    throw Error('Unable to make request. Authentication has not been established');
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (!_this.credentials.accessToken || !_this.credentials.accessTokenSecret) {
                            reject(new Error('Unable to make request. Authentication has not been established'));
                            return;
                        }
                        var formattedUrl = utils_1.formatURL(url);
                        _this.oauth.post(formattedUrl, _this.credentials.accessToken, _this.credentials.accessTokenSecret, body, 'application/x-www-form-urlencoded', function (err, body) {
                            if (err) {
                                reject(err);
                                return;
                            }
                            if (!body) {
                                resolve();
                                return;
                            }
                            var result = utils_1.parse(body.toString());
                            resolve(result);
                        });
                    })];
            });
        });
    };
    return Transport;
}());
exports.default = Transport;
