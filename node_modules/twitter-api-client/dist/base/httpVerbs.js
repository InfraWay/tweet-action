"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.methodNameBuilder = exports.getMethodName = exports.startWithHttpVerb = exports.removeHttpVerbs = void 0;
var lodash_capitalize_1 = __importDefault(require("lodash.capitalize"));
var supportedHttpVerbs = ['POST', 'GET', 'DELETE'];
exports.removeHttpVerbs = function (text) {
    var httpVerbsPattern = new RegExp(supportedHttpVerbs.join('|'));
    return text.replace(httpVerbsPattern, '').trim();
};
exports.startWithHttpVerb = function (text) {
    var httpVerbsPattern = new RegExp("^(" + supportedHttpVerbs.join('|') + ")");
    return httpVerbsPattern.test(text);
};
exports.getMethodName = function (text) {
    if (text.startsWith('GET'))
        return exports.methodNameBuilder('GET');
    if (text.startsWith('POST'))
        return exports.methodNameBuilder('POST');
    if (text.startsWith('DELETE'))
        return exports.methodNameBuilder('DELETE');
};
exports.methodNameBuilder = function (verb) {
    if (supportedHttpVerbs.includes(verb)) {
        return "this.transport.do" + lodash_capitalize_1.default(verb) + "Request";
    }
    throw new Error('This verb is not supported');
};
